"""
Django settings for task_manager project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

import dj_database_url
import django_stubs_ext
from dotenv import load_dotenv
from rest_framework.settings import api_settings

django_stubs_ext.monkeypatch()

load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = os.getenv('DEBUG', 'false').lower() in {'yes', '1', 'true'}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


ALLOWED_HOSTS = list(os.getenv('ALLOWED_HOSTS', '').split(',')) or []

CSRF_TRUSTED_ORIGINS = list(
    os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') or []
)

INSTALLED_APPS = (
    'locale',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bulma',
    'django_celery_beat',
    'task_manager',
    'task_manager.users',
    'task_manager.tasks',
    'task_manager.labels',
    'task_manager.api',
    'rest_framework',
    'django_filters',
    'django_htmx',
    'knox',
    'corsheaders',
)

if DEBUG:
    INSTALLED_APPS = (*INSTALLED_APPS, 'django_extensions')

MIDDLEWARE = (
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

AUTH_USER_MODEL = 'users.User'

LOGIN_REDIRECT_URL = '/'

LOGIN_URL = '/login/'

LOGOUT_REDIRECT_URL = '/login'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases


def get_database_config():
    if os.environ.get('GITHUB_WORKFLOW'):
        return {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'github_actions',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': '127.0.0.1',
                'PORT': '5432',
            },
        }

    if os.getenv('DATABASE_URL'):
        conn_max_age = 500
        return {
            'default': dj_database_url.config(conn_max_age=conn_max_age)  # type: ignore
        }

    return {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('POSTGRES_DB', 'postgres'),
            'USER': os.getenv('POSTGRES_USER', 'postgres'),
            'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'postgres'),
            'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
            'PORT': os.getenv('POSTGRES_PORT', '5432'),
        },
    }


DATABASES = get_database_config()

MIDDLEWARE = (
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
)

ROOT_URLCONF = 'task_manager.urls'
TEMPLATE_DIR = BASE_DIR / 'templates'

TEMPLATES = (
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': (TEMPLATE_DIR,),
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': (
                'django.template.context_processors.media',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'task_manager.context_processors.theme_mode',
                'task_manager.context_processors.registration_available',
            ),
        },
    },
)

WSGI_APPLICATION = 'task_manager.wsgi.application'

APPEND_SLASH = False


def get_rest_framework_config():
    return {
        'DEFAULT_FILTER_BACKENDS': (
            'django_filters.rest_framework.DjangoFilterBackend',
        ),
        'DEFAULT_AUTHENTICATION_CLASSES': ('knox.auth.TokenAuthentication',),
    }


REST_FRAMEWORK = get_rest_framework_config()

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = (
    {
        'NAME': 'django.contrib.auth.password_validation'
        '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.MinimumLengthValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.CommonPasswordValidator'
        ),
    },
    {
        'NAME': (
            'django.contrib.auth.password_validation.NumericPasswordValidator'
        ),
    },
)

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

LANGUAGES = (
    ('en', 'English'),
    ('ru', 'Russian'),
)

LOCALE_PATHS = (BASE_DIR / 'task_manager' / 'locale',)

# Static image (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


STATIC_ROOT = BASE_DIR / 'app_data' / 'files' / 'static'
if not Path(STATIC_ROOT).exists():
    Path(STATIC_ROOT).mkdir(parents=True, exist_ok=True)
STATIC_URL = '/static/'

MEDIA_ROOT = BASE_DIR / 'app_data' / 'files' / 'media'
if not Path(MEDIA_ROOT).exists():
    Path(MEDIA_ROOT).mkdir(parents=True, exist_ok=True)
MEDIA_URL = '/media/'

# Extra places for collectstatic to find static image.
STATICFILES_DIRS = (BASE_DIR / 'task_manager' / 'static',)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Site URL for notifications
SITE_URL = os.environ.get('SITE_URL', 'http://127.0.0.1:8000')

# Celery configuration
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_WORKER_CONCURRENCY = 4
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Celery Beat configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Task routing
CELERY_TASK_ROUTES = {
    'task_manager.tasks.*': {'queue': 'default'},
    'task_manager.users.*': {'queue': 'users'},
}

if 'test' in sys.argv or 'test_coverage' in sys.argv:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    CELERY_ENABLED = False
else:
    CELERY_ENABLED = True

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


def get_bootstrap4_config():
    """Get Bootstrap4 configuration."""
    return {
        'css_url': {
            'href': (
                'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/'
                'bootstrap.min.css'
            )
        },
        'javascript_url': {
            'url': (
                'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/'
                'bootstrap.bundle.min.js'
            )
        },
        'jquery_url': {'url': 'https://code.jquery.com/jquery-3.7.1.min.js'},
        'include_jquery': 'full',
        'horizontal_field_class': 'col-md-10 mb-1',
        'horizontal_label_class': 'col-md-2',
    }


BOOTSTRAP4 = get_bootstrap4_config()

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = ('bulma',)
CRISPY_TEMPLATE_PACK = 'bulma'

# Secure
if not DEBUG:
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True


REST_KNOX = {
    'SECURE_HASH_ALGORITHM': 'hashlib.sha3_512',
    'TOKEN_LIMIT_PER_USER': None,
    'TOKEN_TTL': timedelta(days=30),
    'USER_SERIALIZER': 'knox.serializers.UserSerializer',
    'EXPIRY_DATETIME_FORMAT': api_settings.DATETIME_FORMAT,
    'AUTO_REFRESH': True,
}

# CORS settings
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Разрешенные заголовки
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Разрешенные методы
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
